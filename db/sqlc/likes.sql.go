// Code generated by sqlc. DO NOT EDIT.
// source: likes.sql

package db

import (
	"context"
)

const addLike = `-- name: AddLike :one
INSERT INTO likes (
    user_id,
    post_id,
    liked
) VALUES ($1, $2, $3)
RETURNING id, user_id, post_id, liked, liked_at
`

type AddLikeParams struct {
	UserID int32 `json:"user_id"`
	PostID int32 `json:"post_id"`
	Liked  bool  `json:"liked"`
}

func (q *Queries) AddLike(ctx context.Context, arg AddLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, addLike, arg.UserID, arg.PostID, arg.Liked)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Liked,
		&i.LikedAt,
	)
	return i, err
}

const countPostLikes = `-- name: CountPostLikes :one
SELECT count(*) FROM likes 
WHERE post_id = $1
`

func (q *Queries) CountPostLikes(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPostLikes, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes 
WHERE post_id = $1 
AND user_id = $2
`

type DeleteLikeParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteLike, arg.PostID, arg.UserID)
	return err
}

const getLikeInfo = `-- name: GetLikeInfo :one
SELECT id, user_id, post_id, liked, liked_at FROM likes
WHERE user_id = $1
AND post_id = $2
`

type GetLikeInfoParams struct {
	UserID int32 `json:"user_id"`
	PostID int32 `json:"post_id"`
}

func (q *Queries) GetLikeInfo(ctx context.Context, arg GetLikeInfoParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLikeInfo, arg.UserID, arg.PostID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Liked,
		&i.LikedAt,
	)
	return i, err
}

const listLikesOfUser = `-- name: ListLikesOfUser :many
SELECT id, user_id, post_id, liked, liked_at FROM likes
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListLikesOfUser(ctx context.Context, userID int32) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, listLikesOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.Liked,
			&i.LikedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLike = `-- name: UpdateLike :one
UPDATE likes 
SET liked = $3
WHERE post_id = $1 
AND user_id = $2
RETURNING id, user_id, post_id, liked, liked_at
`

type UpdateLikeParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
	Liked  bool  `json:"liked"`
}

func (q *Queries) UpdateLike(ctx context.Context, arg UpdateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, updateLike, arg.PostID, arg.UserID, arg.Liked)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Liked,
		&i.LikedAt,
	)
	return i, err
}
