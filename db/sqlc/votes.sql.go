// Code generated by sqlc. DO NOT EDIT.
// source: votes.sql

package db

import (
	"context"
)

const addVote = `-- name: AddVote :one
INSERT INTO votes (
    user_id,
    post_id,
    voted
) VALUES ($1, $2, $3)
RETURNING id, user_id, post_id, voted
`

type AddVoteParams struct {
	UserID int32 `json:"user_id"`
	PostID int32 `json:"post_id"`
	Voted  bool  `json:"voted"`
}

func (q *Queries) AddVote(ctx context.Context, arg AddVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, addVote, arg.UserID, arg.PostID, arg.Voted)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Voted,
	)
	return i, err
}

const countVotesOfPost = `-- name: CountVotesOfPost :one
SELECT SUM(
    CASE 
    WHEN voted 
    THEN 1 ELSE -1 
    END
)
FROM votes
WHERE post_id = $1
`

func (q *Queries) CountVotesOfPost(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countVotesOfPost, postID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const deleteVote = `-- name: DeleteVote :exec
DELETE FROM votes 
WHERE post_id = $1 
AND user_id = $2
`

type DeleteVoteParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteVote(ctx context.Context, arg DeleteVoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteVote, arg.PostID, arg.UserID)
	return err
}

const getVoteInfo = `-- name: GetVoteInfo :one
SELECT id, user_id, post_id, voted FROM votes
WHERE user_id = $1
AND post_id = $2
`

type GetVoteInfoParams struct {
	UserID int32 `json:"user_id"`
	PostID int32 `json:"post_id"`
}

func (q *Queries) GetVoteInfo(ctx context.Context, arg GetVoteInfoParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, getVoteInfo, arg.UserID, arg.PostID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Voted,
	)
	return i, err
}

const listVotesOfUser = `-- name: ListVotesOfUser :many
SELECT id, user_id, post_id, voted FROM votes
WHERE user_id = $1
AND voted = true
ORDER BY id
`

func (q *Queries) ListVotesOfUser(ctx context.Context, userID int32) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, listVotesOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vote{}
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.Voted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVote = `-- name: UpdateVote :one
UPDATE votes 
SET voted = $3
WHERE post_id = $1 
AND user_id = $2
RETURNING id, user_id, post_id, voted
`

type UpdateVoteParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
	Voted  bool  `json:"voted"`
}

func (q *Queries) UpdateVote(ctx context.Context, arg UpdateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, updateVote, arg.PostID, arg.UserID, arg.Voted)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Voted,
	)
	return i, err
}
